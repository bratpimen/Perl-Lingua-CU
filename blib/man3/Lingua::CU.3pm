.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Lingua::CU 3"
.TH Lingua::CU 3 "2013-09-10" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Lingua::CU \- Perl extension for working with Church Slavonic text in Unicode
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  use Lingua::CU \*(Aq:all\*(Aq;
\&  arabicToCyrillic (21); # returns XXX
\&  cyrillicToArabic ("XXX"); # returns 21
\&  resolve ("XXXX"); # returns XXXXXX
\&  cu2ru ("XXXX"); # returns XXXXXX
\&  cu2ru ("XXXX", { noaccents => 1, modernrules => 1 }); # returns XXXX
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Lingua::CU is a module for performing various operations with Church Slavonic texts.
.PP
It includes the following capabilities:
.IP "Resolve Church Slavonic abbreviations and \fInomina sacra\fR" 4
.IX Item "Resolve Church Slavonic abbreviations and nomina sacra"
.PD 0
.IP "Convert between Cyrillic and Arabic numerals" 4
.IX Item "Convert between Cyrillic and Arabic numerals"
.IP "Perform basic conversions between the Julian and Gregorian calendars (\s-1TODO\s0)" 4
.IX Item "Perform basic conversions between the Julian and Gregorian calendars (TODO)"
.IP "Convert Church Slavonic text to Russian characters (both traditional and reformed orthography)" 4
.IX Item "Convert Church Slavonic text to Russian characters (both traditional and reformed orthography)"
.IP "Romanize (transliterate to Latin) Church Slavonic text using various systems (\s-1TODO\s0)" 4
.IX Item "Romanize (transliterate to Latin) Church Slavonic text using various systems (TODO)"
.IP "Convert between Unicode and legacy \s-1UCS\s0 and \s-1HIP\s0 encodings (\s-1TODO\s0)" 4
.IX Item "Convert between Unicode and legacy UCS and HIP encodings (TODO)"
.IP "Sort Church Slavonic words using a tailoring of the \s-1DUCET\s0 (\s-1TODO\s0)" 4
.IX Item "Sort Church Slavonic words using a tailoring of the DUCET (TODO)"
.IP "Perform stemming of Church Slavonic words (\s-1TODO\s0)" 4
.IX Item "Perform stemming of Church Slavonic words (TODO)"
.PD
.PP
All text supplied to this library must be encoded in \s-1UTF\-8\s0 and, unless otherwise specified, is assumed to be
in Unicode. For more on Church Slavonic using Unicode, please see the paper
\&\fIRoadmap for Church Slavonic Typography in the Unicode Standard\fR available at 
http://www.ponomar.net/.
.PP
This program is \s-1ALPHA\s0 \s-1STAGE\s0 \s-1SOFTWARE\s0 and is provided with \s-1ABSOLUTELY\s0 \s-1NO\s0 \s-1WARRANTY\s0 of any kind,
express or implied, not even the implied warranties of merchantability, fitness for a purpose, or non-infringement.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
No methods are exported by default.
.PP
The following methods may be exported if specified explicitly: \f(CW\*(C`arabicToCyrillic\*(C'\fR \f(CW\*(C`cyrillicToArabic\*(C'\fR \f(CW\*(C`resolve\*(C'\fR \f(CW\*(C`cu2ru\*(C'\fR.
.PP
You may also export all of the above methods by writing: \f(CW\*(C`use Lingua::CU \*(Aq:all\*(Aq;\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "arabicToCyrillic"
.IX Subsection "arabicToCyrillic"
Usage: \f(CW\*(C`arabicToCyrillic( $number )\*(C'\fR
.PP
Takes an Arabic number and returns the corresponding Cyrillic numeral. Croaks if \f(CW$number\fR is not numeric.
.PP
Example: \f(CW\*(C`arabicToCyrillic ( 121 )\*(C'\fR returns \f(CW\*(C`XXXX\*(C'\fR.
.SS "cyrillicToArabic"
.IX Subsection "cyrillicToArabic"
Usage: \f(CW\*(C`cyrillicToArabic( $numeral )\*(C'\fR
.PP
Takes a Cyrillic numeral and returns the corresponding Arabic number. Carps if \f(CW$numeral\fR is not a well-formatted Slavonic number.
.PP
Example: \f(CW\*(C`cyrillicToArabic("XXXX")\*(C'\fR returns \f(CW121\fR.
.SS "resolve"
.IX Subsection "resolve"
Usage: \f(CW\*(C`resolve( $word )\*(C'\fR
.PP
Takes a word that is written with a titlo or lettered titlo (as an abbreviation or \fInomen sacrum\fR) and writes it out in full, resolving the abbreviation.
.PP
Bugs: correct placement of stress marks and capitalization are not guaranteed. Titlo resolution relies on a list that can still be improved.
.PP
Warning: the Slavonic word \fB\s-1XXXX\s0\fR could both be an abbreviation for \s-1XXXXX\s0 and a numeral (251). Thus,
\&\f(CW\*(C`resolve(\*(AqXXXX\*(Aq)\*(C'\fR will return \f(CW\*(C`XXXXX\*(C'\fR but \f(CW\*(C`cyrillicToArabic(\*(AqXXXX\*(Aq)\*(C'\fR will return \f(CW251\fR.
.SS "cu2ru"
.IX Subsection "cu2ru"
Usage: \f(CW\*(C`cu2ru( $text, [modernrules = 0, noaccents = 0, skiptitlos = 0])\*(C'\fR
.PP
Takes well-formatted Church Slavonic \f(CW$text\fR and transforms it into Russian (civil) orthography. The following operations are performed:
.ie n .IP "Titli and lettered titli are resolved (if the ""skiptitlos"" parameter is not zero, this step is skipped; this is only useful if you are converting text known to have no abbreviations and wish to save time or if you are writing your own titlo processor for non standard text like text with \s-1XML\s0 markup or pre-Nikonian editions)" 4
.el .IP "Titli and lettered titli are resolved (if the \f(CWskiptitlos\fR parameter is not zero, this step is skipped; this is only useful if you are converting text known to have no abbreviations and wish to save time or if you are writing your own titlo processor for non standard text like text with \s-1XML\s0 markup or pre-Nikonian editions)" 4
.IX Item "Titli and lettered titli are resolved (if the skiptitlos parameter is not zero, this step is skipped; this is only useful if you are converting text known to have no abbreviations and wish to save time or if you are writing your own titlo processor for non standard text like text with XML markup or pre-Nikonian editions)"
.PD 0
.IP "Cyrillic numerals are resolved to Arabic numbers (but see note above concerning \fB\s-1XXXX\s0\fR)" 4
.IX Item "Cyrillic numerals are resolved to Arabic numbers (but see note above concerning XXXX)"
.IP "Stress marks are transformed to the acute accent (U+0301) and all other diacritical marks are removed" 4
.IX Item "Stress marks are transformed to the acute accent (U+0301) and all other diacritical marks are removed"
.IP "Letters that do not occur in Russian are transformed into their Russian analogs (e.g., X is transformed to X)" 4
.IX Item "Letters that do not occur in Russian are transformed into their Russian analogs (e.g., X is transformed to X)"
.IP "Some spelling is normalized to agree with common Russian rules (e.g., \s-1XX\s0 is transformed to \s-1XX\s0)" 4
.IX Item "Some spelling is normalized to agree with common Russian rules (e.g., XX is transformed to XX)"
.ie n .IP "If optional parameter ""noaccents"" is not zero, all stress marks are removed; otherwise, stress indications remain in the text, but only as the acute accent (U+0301)" 4
.el .IP "If optional parameter \f(CWnoaccents\fR is not zero, all stress marks are removed; otherwise, stress indications remain in the text, but only as the acute accent (U+0301)" 4
.IX Item "If optional parameter noaccents is not zero, all stress marks are removed; otherwise, stress indications remain in the text, but only as the acute accent (U+0301)"
.ie n .IP "If optional parameter ""modernrules"" is not zero, the text is further simplified into modern Russian orthography (that means that X is resolved to X, X is resolved to X, and trailing X is removed); otherwise, traditional (pre\-1918) orthography is assumed" 4
.el .IP "If optional parameter \f(CWmodernrules\fR is not zero, the text is further simplified into modern Russian orthography (that means that X is resolved to X, X is resolved to X, and trailing X is removed); otherwise, traditional (pre\-1918) orthography is assumed" 4
.IX Item "If optional parameter modernrules is not zero, the text is further simplified into modern Russian orthography (that means that X is resolved to X, X is resolved to X, and trailing X is removed); otherwise, traditional (pre-1918) orthography is assumed"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This software is part of the Ponomar Project (see http://www.ponomar.net/X).
.PP
Be sure to read the \fIRoadmap for Church Slavonic Typography in the Unicode Standard\fR and to download the 
Unicode-compatible Hirmos Ponomar font.
.PP
Be sure to read as well \f(CW\*(C`perluniintro\*(C'\fR and \f(CW\*(C`perllocale\*(C'\fR in the Perl manual.
.SH "AUTHOR"
.IX Header "AUTHOR"
Aleksandr Andreev <aleksandr.andreev@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2012, 2013 by Aleksandr Andreev
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.14.2 or,
at your option, any later version of Perl you may have available.
